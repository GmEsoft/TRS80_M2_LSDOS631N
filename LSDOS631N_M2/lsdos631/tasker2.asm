;****************************************************************;* Filename: TASKER/ASM						*;* Rev Date: 30 Nov 97						*;* Revision: 6.3.1						*;****************************************************************;* System front end and task processor				*;*								*;****************************************************************;;	Interrupt task table, IM 1;CORE$	DEFL	$		;save where we are;	ORG	TCB$	DW	NOTASK,NOTASK,NOTASK,NOTASK	DW	NOTASK,NOTASK,NOTASK,NOTASK	DW	NOTASK,NOTASK,NOTASK,NOTASK	ORG	CORE$;;	Model II Task Processor;NMI@	EX	(SP),HL	LD	(PCSAVE$),HL	;Save for trace	EX	(SP),HL	PUSH	AF	IN	A,(0FEH)	PUSH	BC	PUSH	DE	PUSH	HL	PUSH	IX	LD	HL,NFLAG$	SET	6,(HL)	CALL	TIMTSK$		;Timer tick task	LD	A,R	JP	PO,L1C1E	LD	A,(BSYFLG$)	;TODO: busy flag for int ?	AND	0C0H	CALL	Z,@RST38L1C1E	LD	HL,10DBH	LD	A,(HL)	OR	A	JR	Z,POPREGS	DEC	(HL)	JR	NZ,POPREGS	LD	A,4FH		; 'O'	OUT	(0EFH),A;;	Register restoral after service routine;POPREGS	POP	IX	LD	HL,NFLAG$	RES	6,(HL)	POP	HL	POP	DE	POP	BC	POP	AF	RETN;RST38@	LD	HL,LBANK$	LD	A,(HL)	PUSH	AF	LD	(HL),00H	LD	A,(MODOUT$)	PUSH	AF	AND	70H	OR	01H	CALL	@MODOUT		;set MODOUT$	CALL	RTCPROC		;Real time clock interrupt processor	POP	AF	CALL	@MODOUT		;set MODOUT$	POP	AF	LD	(LBANK$),A	RET;;	Real time clock interrupt processor;RTCPROC EQU	$	LD	A,11		;Task 11 executes every	CALL	RTCTASK		;  rtc interrupt	LD	HL,TIMSL$	RLC	(HL)		;Check on time slice	RET	NC		;Ignore if nothing	LD	A,8		;Task 8 at int/2 if fast	CALL	RTCTASK	LD	A,9	CALL	RTCTASK	LD	A,10	CALL	RTCTASK	LD	HL,TIMER$	;Bump the timer at int/2	INC	(HL)	LD	A,(HL)		;Get heartbeat	AND	7		;For this interrupt,RTCTASK RLCA			;  consider 0-7 only	ADD	A,TCB$&0FFH	;Add offset to table	LD	L,A	LD	H,TCB$<-8	LD	(@RPTSK+1),HL	;Save (6.3.1)	LD	E,(HL)		;Get task vector addr	INC	HL	LD	D,(HL)	PUSH	DE	POP	IX		;Also to IX	LD	L,(IX+0)	LD	H,(IX+1)	JP	(HL)		;Go to task;@KLTSK	POP	DE		;Remove ret	LD	A,(@RPTSK+1)	;Point to task table entry	SUB	TCB$&0FFH	RRCA			;  of the last task	LD	DE,NOTASK	;Current task vector	JR	@ADTSK1;@RMTSK	LD	DE,NOTASK	;Remove entry;@ADTSK	CALL	@MRES5		;Reset bit 5 of MODOUT$	CALL	@ADTSK1	JP	@MSET5		;Set bit 5 of MODOUT$;@ADTSK1	CP	12		;Too large a task?	JR	C,CHGTASK	LD	A,28H		;Error code 40: Protected System Device	OR	A	RET;CHGTASK	ADD	A,A		;Add to task table	ADD	A,TCB$&0FFH	;Add the offset	LD	L,A		;Point to vector	LD	H,TCB$<-8	LD	(HL),E		;Put addr to ptr table	INC	HL	LD	(HL),D	RET;NOTASK	DW	$-1		;Current task vector;@RPTSK	LD	HL,0		;Get last task done	LD	E,(HL)		;Get task vector addr	INC	HL	LD	D,(HL)	EX	DE,HL	POP	DE		;Pop ret addr	JR	@ADTSK1;;	Routine to see if a task slot active;@CKTSK	RLCA			;Task # times 2	ADD	A,TCB$&0FFH+1	;Index into task table	LD	L,A	LD	H,TCB$<-8	LD	A,NOTASK<-8	;Check match of high	CP	(HL)		;  order only	RET			;Z or NZ;	END